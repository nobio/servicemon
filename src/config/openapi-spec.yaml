openapi: 3.0.0
servers:
  - description: localhost (http)
    url: "https://localhost:28093"
  - description: Home Server
    url: "https://nobio.myhome-server.de/servicemon"
security:
  - bearerAuth: []
  - apiKeyAuth: []
info:
  description: HTTP Status Code Monitor
  version: 1.0.0
  title: HTTP Status Code Monitor
  contact:
    email: gernot.reichel@teambank.de
tags:
  - name: default
    description: Root Document
  - name: hosts
    description: Alles über die konfigurierten Hosts
  - name: queue
    description: Monitoring Ergebnisse
  - name: status
    description: Status Events
paths:
  /:
    get:
      tags:
        - default
      summary: Bechreibung der Services
      responses:
        "200":
          description: returns parameter as passed in request (Key=Magic-Header)
          content:
            application/json:
              schema:
                type: array
                maxItems: 100000
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    method:
                      type: string
                      description: http method
                      example: get
                    url:
                      type: string
                      maxLength: 128
                      pattern: >-
                        (https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})
                      description: the url without base url
                      example: /api/test
                    description:
                      type: string
                      maxLength: 128
                      pattern: '^[\w-.]'
                      description: Some description of this configuration item
                      example: Dies ist eine Beschreibung
                    example:
                      type: string
                      maxLength: 128
                      pattern: '^[\w-.]'
                      description: curl example how to call this service
                      example: "curl -X GET http://<host>:<port>/api/hosts"
  /api/hosts:
    get:
      tags:
        - hosts
      summary: Liefert alle Hosts mit deren Konfiguration
      responses:
        "200":
          description: Liste über alle konfigurierten Hosts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/hosts"
  "/api/httpstatus/{id}":
    post:
      tags:
        - status
      summary: Übernimmt ein Status-Objekt und speichert es
      requestBody:
        required: true
        content:
          application/json; charset=utf-8:
            schema:
              $ref: "#/components/schemas/status-receive"
      parameters:
        - name: id
          in: path
          description: >-
            unique identifier of a specific host configuration; most likely
            retrieved by .../hosts method
          required: true
          schema:
            type: string
            maxLength: 64
            pattern: '^[\w-.]'
      responses:
        "200":
          description: Succesful Response
        "500":
          description: Failed Response
  "/api/queue/{configId}/status":
    get:
      tags:
        - queue
      summary: Liefert den letzten ermittelten Status einer Host-Abfrage mit Metadaten
      parameters:
        - name: configId
          in: path
          description: >-
            unique identifier of a specific host configuration; most likely
            retrieved by .../hosts method
          required: true
          schema:
            type: string
            maxLength: 64
            pattern: '^[\w-.]'
      responses:
        "200":
          description: Letztes Statusergebnis für den angegebenen Host
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/status"
  "/api/queue/{configId}/timeseries/{timeUnit}":
    get:
      tags:
        - queue
      summary: >
        Liefert eine Zeitreihe gemessener Daten. Dazu muss neben dem Host
        (configId) eine Zeiteinheit (z.B. hours) und die Anzahl der
        Zeiteinheiten gegeben werden. Es werden also die Datensätze selektiert,
        die zwischen "jetzt" und n Zeiteinheiten von "jetzt" in der
        Vergangeneheit liegen.
      parameters:
        - name: configId
          in: path
          description: >-
            unique identifier of a specific host configuration; most likely
            retrieved by .../hosts method
          required: true
          schema:
            type: string
            maxLength: 64
            pattern: '^[\w-.]'
        - name: timeUnit
          in: path
          description: Zeiteinheit
          required: true
          schema:
            type: string
            maxLength: 20
            pattern: '^[\w-.]'
            default: hours
            enum:
              - months
              - days
              - hours
              - minutes
              - seconds
        - name: count
          in: query
          description: Anzahl von Zeiteinheiten in die Vergangeneheit
          required: true
          schema:
            type: number
        - name: start
          in: query
          description: >-
            start timestamp from which the time series is loaded; if not
            required, the actual time stamp is taken by default (ISO format)
          required: false
          schema:
            type: string
            format: date
            example: "2020-11-05T08:25:21.014Z"
            description: timestamp of end of test
      responses:
        "200":
          description: >-
            Liste der Statusergebnis für den angegebenen Host und Zeitraum
            (implizit bestimmt durh Zeiteinheit und Anzahl Zeiteinheiten)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statuses"
components:
  schemas:
    hosts:
      type: array
      maxItems: 1000
      items:
        $ref: "#/components/schemas/host"
    host:
      type: object
      additionalProperties: false
      properties:
        enable:
          type: boolean
          example: false
          description: switch if this host should be monitored or not
        id:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: a8e969f4-fcd1-4f2d-b7ce-6e800bdfc963
          description: Unique ID to identify this host cnfiguration
        name:
          type: string
          maxLength: 20
          pattern: '^[\w-.]'
          example: Test for host xxx@yyy.edu
          description: >-
            Display name of this configuration; should say something about the
            expected value
        schedule:
          type: number
          example: 60
          description: Time in seconds this host will be requested
        protocol:
          type: string
          maxLength: 5
          pattern: '^[\w-.]'
          example: https
          description: Protocol of URI to monitor the host
        baseUrl:
          type: string
          maxLength: 20
          pattern: '^[\w-.]'
          example: www.heise.de
          description: Base URL of URI to monitor the host
        url:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          description: URL of URI to monitor the host
        method:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: true
          description: http-method to request the host
        ignoreSSL:
          type: boolean
          example: true
          description: >-
            if protocol = https this switch could be set to ignore self signed
            cetrificates
        lastStatus:
          type: number
          example: 200
          description: http-status code of last test
        lastStatusText:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: OK
          description: readable http-status code of last test
        lastStart:
          type: string
          format: date
          example: "2020-11-05T08:25:21.014Z"
          description: timestamp of end of test
        lastDuration:
          type: number
          example: 283
          description: latency of request in milli seconds
    statuses:
      type: array
      maxItems: 10
      items:
        $ref: "#/components/schemas/status"
    status:
      type: object
      additionalProperties: false
      properties:
        txId:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: 14e83800-32f8-4714-98aa-d11e94892b29
          description: unique identifier of one request-transaction
        configId:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: a8e969f4-fcd1-4f2d-b7ce-6e800bdfc963
          description: Unique ID to identify this host cnfiguration
        configName:
          type: string
          maxLength: 20
          pattern: '^[\w-.]'
          example: true
          description: >-
            Display name of this configuration; should say something about the
            expected value
        status:
          type: number
          example: 200
          description: http-status code of last test
        statusText:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: OK
          description: readable http-status code of last test
        uri:
          type: string
          maxLength: 80
          pattern: >-
            (https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})
          example: "https://www.zeiss.de"
          description: URI of requested host
        method:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: GET
          description: http-method of last test
        tsStart:
          type: string
          format: date
          example: "2020-11-05T08:25:20.731Z"
          description: timestamp of start of test
        tsEnd:
          type: string
          format: date
          example: "2020-11-05T08:25:21.014Z"
          description: timestamp of end of test
        duration:
          type: number
          example: 283
          description: latency of request in milli seconds
        source:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: TBCL01440
          description: host name where this application runs
    status-receive:
      type: object
      additionalProperties: false
      properties:
        configId:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: a8e969f4-fcd1-4f2d-b7ce-6e800bdfc963
          description: Unique ID to identify this host cnfiguration
        configName:
          type: string
          maxLength: 40
          pattern: '^[\w-.]'
          example: true
          description: >-
            Display name of this configuration; should say something about the
            expected value
        status:
          type: number
          example: 200
          description: http-status code of last test
        statusText:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: OK
          description: readable http-status code of last test
        uri:
          type: string
          maxLength: 80
          pattern: >-
            (https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]+\.[^\s]{2,}|www\.[a-zA-Z0-9]+\.[^\s]{2,})
          example: "https://www.zeiss.de"
          description: URI of requested host
        method:
          type: string
          maxLength: 10
          pattern: '^[\w-.]'
          example: GET
          description: http-method of last test
        tsStart:
          type: string
          format: date
          example: "2020-11-05T08:25:20.731Z"
          description: timestamp of start of test
        tsEnd:
          type: string
          format: date
          example: "2020-11-05T08:25:21.014Z"
          description: timestamp of end of test
        duration:
          type: number
          example: 283
          description: latency of request in milli seconds
        source:
          type: string
          maxLength: 20
          pattern: '^[\w-.]'
          example: TBCL01440
          description: host name where this application runs
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
